package live.crowdcontrol.cc4j.websocket.payload;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;
import com.fasterxml.jackson.annotation.JsonValue;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * The service a user logged in from.
 */
public enum ProfileType {
	/**
	 * <a href="https://twitch.tv/" target="_blank">Twitch</a>
	 */
	TWITCH("twitch"),
	/**
	 * <a href="https://youtube.com/" target="_blank">YouTube</a>
	 */
	YOUTUBE("youtube"),
	/**
	 * <a href="https://discord.com/" target="_blank">Discord</a>
	 */
	DISCORD("discord"),
	/**
	 * <a href="https://tiktok.com/" target="_blank">TikTok</a>
	 */
	TIKTOK("tiktok"),
	/**
	 * A pseudo-user generated by sending a Gift on a <a href="https://tiktok.com/" target="_blank">TikTok</a> livestream.
	 */
	TIKTOK_GIFTER("tiktok-gifter"),
	/**
	 * <a href="https://pulsoid.net/" target="_blank">Pulsoid</a>
	 */
	PULSOID("pulsoid"),
	/**
	 * The JSON-specified value could not be decoded.
	 */
	@JsonEnumDefaultValue
	UNKNOWN(""),
	;

	// Static

	private static final Map<String, ProfileType> BY_VALUE;

	static {
		Map<String, ProfileType> byValue = new HashMap<>();
		for (ProfileType status : values()) {
			if (status == UNKNOWN) continue;
			byValue.put(status.value, status);
		}
		BY_VALUE = Collections.unmodifiableMap(byValue);
	}

	/**
	 * Gets a profile from its JSON string value.
	 * If a profile by the provided name could not be found, returns {@link #UNKNOWN}.
	 *
	 * @param value JSON string value
	 * @return result status value
	 */
	@JsonCreator
	public static @NotNull ProfileType fromValue(@NotNull String value) {
		return BY_VALUE.getOrDefault(value, UNKNOWN);
	}

	// Instance

	private final @NotNull String value;

	ProfileType(@NotNull String value) {
		this.value = value;
	}

	/**
	 * Gets the encoded string value of this profile.
	 *
	 * @return json value
	 */
	@JsonValue
	public @NotNull String getValue() {
		return value;
	}

	@Override
	public String toString() {
		return getValue();
	}
}
